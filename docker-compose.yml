
version: '3.7'

volumes:
  rversions-data:
  certbot-etc:
  certbot-var:
  web-root:
  logstash-data:
  package-data:

secrets:
  app-insights-key:
    external: true

services:

  rversions:
    image: "rhub/api-rversions:0.0.27"
    environment:
      - REDIS_HOST=rversions-redis
      - PORT=3000
      - R_VERSIONS_CACHE_LIMIT=3600000
    secrets:
      - app-insights-key
    depends_on:
      - rversions-redis
    healthcheck:
      test: curl -s http://127.0.0.1:3000/r-release >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  rversions-redis:
    image: "redis:4.0.11-alpine"
    volumes:
      - rversions-data:/data
    deploy:
      restart_policy:
        condition: on-failure

  nginx:
    build: "./nginx"
    image: "rhub/api-nginx:0.0.2"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - web-root:/var/www/html:ro
      - certbot-etc:/etc/letsencrypt:ro
      - certbot-var:/var/lib/letsencrypt:ro
    depends_on:
      - rversions
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload && echo NGINX config reload for Certbot - OK; done & nginx -g \"daemon off;\"'"
    healthcheck:
      test: curl -s http://127.0.0.1/rversions/r-release >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 100
        window: 120s

  certbot:
    image: "certbot/certbot"
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    depends_on:
      - nginx
#   command: certonly --webroot --webroot-path=/var/www/html --email csardi.gabor@gmail.com --agree-tos --no-eff-email -d api.r-hub.io
    command: renew
    deploy:
      restart_policy:
        condition: any
        delay: 24h

  elasticsearch:
    build: ./elasticsearch
    image: "rhub/search-elasticsearch:0.0.4"
    environment:
    - cluster.name=search-cluster
    - bootstrap.memory_lock=false
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - package-data:/usr/share/elasticsearch/data
    healthcheck:
      test: curl -s http://127.0.0.1:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  elastic-seed:
    build: ./seed
    image: "rhub/search-seed:0.0.4"
    entrypoint:
    - bash
    - -c
    - /seed/elastic.sh
    deploy:
      restart_policy:
        condition: on-failure

  logstash:
    build: ./logstash
    image: "rhub/search-logstash:0.0.4"
    volumes:
    - logstash-data:/usr/share/logstash/data
    healthcheck:
      test: curl -s http://127.0.0.1:9600 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        delay: 10s
      rollback_config:
        parallelism: 0
        order: stop-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  search-cron:
    build: ./cron
    image: "rhub/search-cron:0.0.5"
    deploy:
      restart_policy:
        condition: any
